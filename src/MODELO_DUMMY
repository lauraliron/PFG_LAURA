import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.metrics import mean_absolute_error, mean_squared_error

from src.utils import cargar_datos_parquet


def inspeccionar_columnas(df: pd.DataFrame) -> list[str]:
    print(df.columns)
    columnas_a_eliminar = ["Fecha", "Hospital"]
    pd.set_option("display.max_columns", None)
    print(df.head())
    return columnas_a_eliminar


def main():
    ruta = r"C:\\Users\\usuario\\EmergenciasHospitalarias\\data\\datos_resumen.parquet"
    df = cargar_datos_parquet(ruta)
    df = df[df["Hospital"] == "C.A. Zamora"]
    columnas_a_eliminar = inspeccionar_columnas(df)

    hospitales = df["Hospital"].dropna().unique()

    for hospital in hospitales:
        print(f"\n===== Procesando hospital: {hospital} =====")
        df_h = df[df["Hospital"] == hospital].dropna()
        if df_h.shape[0] < 100:
            print("Demasiado pocos registros, se omite.")
            continue

        last_date = df_h["Fecha"].max()
        cutoff_date = last_date - pd.DateOffset(months=3)

        train = df_h[df_h["Fecha"] <= cutoff_date].copy()
        test = df_h[df_h["Fecha"] > cutoff_date].copy()

        if train.empty or test.empty:
            print("Sin datos suficientes para entrenar o testear. Se omite.")
            continue

        y_train = train["Pacientes"]
        y_test = test["Pacientes"]

        # Dummy prediction: media del entrenamiento
        y_pred = np.full_like(y_test, y_train.mean(), dtype=float)

        mae = mean_absolute_error(y_test, y_pred)
        mse = mean_squared_error(y_test, y_pred)
        print(f"MAE Dummy para {hospital}:", mae)
        print(f"MSE Dummy para {hospital}:", mse)

        # Preparar fechas para graficar
        shift_times = {"Madrugada": "08:00:00", "Día": "16:00:00", "Noche": "00:00:00"}
        test["PlotDateTime"] = pd.to_datetime(
            test["Fecha"].dt.strftime("%Y-%m-%d") + " " + test["Turno"].map(shift_times)
        )

        N = min(len(y_pred), len(y_test), len(test["PlotDateTime"]))
        comparison_df = pd.DataFrame(
            {
                "Fecha": test["PlotDateTime"].iloc[:N].values,
                "Actual": y_test.iloc[:N].values,
                "Predicted": y_pred[:N],
            }
        ).sort_values(by="Fecha")

        plt.figure(figsize=(14, 6))
        plt.plot(
            comparison_df["Fecha"], comparison_df["Actual"], label="Actual", marker="o"
        )
        plt.plot(
            comparison_df["Fecha"],
            comparison_df["Predicted"],
            label="Predicción Dummy",
            marker="x",
        )
        plt.xlabel("Fecha y Turno")
        plt.ylabel("Pacientes")
        plt.title(f"Modelo Dummy (media) - {hospital}")
        plt.legend()
        plt.grid(True)
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.show()


if __name__ == "__main__":
    main()
